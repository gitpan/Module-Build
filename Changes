Revision history for Perl extension Module::Build.

0.08  Wed Jun 26 20:30:56 EST 2002

  - Fixed the 'prereq' alias for the 'requires' parameter

  - Added some tests in t/basic.t to test the dependency checking

  - Added 'artistic' as a licensing option [Arthur Bergman]

  - Fixed some bugs in requires/prereq/recommends/conflicts/build_depends

  - Fixed a typo in the 'distclean' action that prevented its
    execution [Arthur Bergman]

  - Separated the linking phase of building XS items into its own
    link_c() method.  Its interface is still unstable, so it's not
    documented yet. [suggested by Arthur Bergman]

0.07  Jun  9 2002 15:46

  - We now generate a 'META.yaml' metadata file during 'Build dist'.
    This can be very useful for lots of things, none of which are
    implemented yet.

  - Added a 'dynamic_config' parameter, defaulting to false.  This
    lets distribution systems (CPAN.pm, etc.) build, test, and install
    "easy" modules without having to execute the Build.PL at runtime.
    It's also a guarantee that the list of dependencies is exactly
    what is present in the metadata file, and won't be changed during
    the build process.

  - Added support for "recommended" and "build-time requirement"
    modules, besides those that are absolutely required.  Also added a
    "conflicts" field.

  - Changed the 'prereq' field to 'requires' (the old name will
    continue to work).

  - Added support for checking the installed version of perl as an
    explicit dependency.

  - Added a 'license' parameter to specify one of a fixed number of
    licenses for the distribution.

  - Fixed a bug in Module::Build::Compat that was preventing arguments
    from being processed properly. [patch by Ilya Martynov]

  - Make sure we're in the right directory when we write the cleanup
    file, since various ExtUtils::Install errors might leave us in an
    unknown directory. [patch by Ilya Martynov]

  - Specified the 'license', 'recommends', and 'dynamic_config'
    values in Build.PL, and changed 'prereq' to 'requires'.

0.06  Apr 2 2002 17:44

  - Added the Module::Build::Compat module for assisting and
    explaining compatibility with ExtUtils::Makemaker and cohorts.

  - State is now saved using Data::Dumper instead of my ad-hoc
    mechanism, guaranteeing data integrity.  Whitespace values broke
    in the former scheme.

  - Added the 'recommended' option, which works like 'prereq' but
    isn't insistent.

  - Separated the various parameters into three groups: parameters
    that tell Module::Build what to do, Config.pm parameters, and
    user-defined parameters for each build (the module author is the
    'user' here).  This helps avoid conflicts between names, and it
    was silly to have them all together.  The three groups of
    parameters are subject to the same rules for overriding: values
    specified during a Build action take precedence over values
    specified at 'perl Build.PL' time, which in turn take precedence
    over values specified in the call to new().

  - Improved support for .PL files.  Any .PL file in the lib/
    directory or the directory specified by 'c_source' will now get
    properly executed.  I also added a 'PL_files' parameter that you
    can use in case the .PL doesn't create an obviously-named output
    file.

  - If a prerequisite condition is malformed, we now report a prereq
    failure and say why.  Previously we issued a warning and kept
    going.


0.05   10-Jan-2002 20:26
  - Added the Module::Build->subclass() method, which makes it easier to
    make quick-and-dirty subclasses of Module::Build.

  - Reorganized the docs a bit.

  - Added the 'testdb' action, and the 'debugger=1' argument to the
    'test' action, both of which run tests under the perl
    debugger. (idea: Dave Rolsky)

  - Added prerequisite checking (Dave Rolsky)
XXX Needs to write _build/prereq

  - Fixed an unlikely-to-occur bug with misquoted strings in the
    'Build' script (spot: Dave Rolsky)

  - We're more careful about shush-ing warnings that
    ExtUtils::Manifest might emit (Dave Rolsky)

  - The 'help' action now auto-generates the list of actions (Dave Rolsky)

  - Added the 'distcheck', 'skipcheck', 'distclean', 'distdir', and
    'disttest' actions (Dave Rolsky)

  - We're a little more aggressive about cleaning up temporary files -
    we'll try to clean them up even when we don't have write permission
    on them.  This isn't as dastardly as it sounds; if we /really/
    don't have permission, we won't be able to remove them no matter
    how hard we try.

0.04   Fri Nov 16 16:55 2001
  - Added a 'manifest' action.  It's just like MakeMaker's 'make manifest', it
    brings your MANIFEST file up to date with your distribution directory.

  - Reorganized some of the responsibilities of various methods, which
    allows modules to be built and tested programmatically.

  - The 'clean' action will now clean up files that were created more
    recently than the on-disk cleanup registry was written.

  - Undefined values from Config.pm are handled correctly now.

  - The dispatch() method will now accept explicit dispatch
    parameters, for use in a programmatic setting.

  - $ENV{TEST_VERBOSE} will be set in test scripts if the 'verbose=1'
    parameter is set.

  - Moved the test.pl script to t/basic.t

  - Created the t/xs.t script, which tests building a module with a
    .xs component.

  - Fixed the loading of $^O-specific modules (there were no such
    modules before).

  - Added a 'darwin' platform module, which removes -flat_namespace
    from $Config{ccflags} while building .xs modules (it's a linker
    flag, not a compiler flag).

  - Now uses $^W instead of the 'warnings' pragma, which apparently
    provides compatibility with perl 5.005 (I've only tested it with
    5.6.x myself).

  - If a file called C<visual.pl> exists in the top-level directory,
    this file will be executed as a Perl script during 'Build test' and
    its output will be shown to the user.  This is a good place to put
    speed tests or other tests that don't use the C<Test::Harness> format
    for output.

  - The 'Build install' step will now put .xs-related things in the
    correct architecture-dependent libraries.

  - Added the 'autosplit' option, even though I think autosplitting is
    a load of hooie.

0.03  Sun Nov 11 14:58 CDT 2001
  - The 'perl Build.PL' step will now detect whether the current
    environment is "unixish", "windowsish", etc., and load the correct
    module (i.e. Module::Build::Platform::Unix).  More specific
    modules may also be written for particular values of $^O.

  - Module::Build will now process any .xs files in the lib/
    directory.  Please let me know whether this works or not with your
    distribution & platform.  I'll be trying out various distributions
    on my platform.

  - Corrected some embarassing errors in the POD documentation.  Also
    added a long documentation section on the various build actions
    (test, install, build, etc.) and added some neato ASCII art.

  - Added a 'cleanup' mechanism - any method may call the
    $self->add_to_cleanup(@files) method to register files which need
    to be cleaned up during 'Build clean'.

  - Added a 'Build help' action that gives a little syntax help, and
    lists all the actions available.

  - Fixed a bug in which 'blib/' wasn't properly being added to @INC
    when running 'Build test'.

  - For the 'Build dist' action, we'll use the 'tar' and 'gzip'
    programs (as specified by Config.pm) on Unix platforms, otherwise
    we'll use Archive::Tar and Compress::Zlib.
 
0.02  Wed Sep  5 00:53:04 CDT 2001
  - Added POD documentation.

  - Added the 'install', 'fakeinstall', and 'dist' actions.

  - new() will now determine version string based on 'module_version', or
    'module_version_from', or 'module_name', in that order.

  - Module::Build::Base handles its file paths in a platform-independent
    way, using the File:: modules


0.01  Sun Aug  5 01:23:10 2001
  - original version; created by h2xs 1.1.1.4 with options -XA -n Module::Build

